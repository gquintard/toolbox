#! /bin/bash

set -e

unset RUNOPTS
if [ -z "$BOB_BINARY" ]; then
	if command -v podman -v > /dev/null; then
		BOB_BINARY=podman
		RUNOPTS=--userns=keep-id
	else
		BOB_BINARY=docker
		RUNOPTS="--user $USER:$(id -g)"
	fi
fi

if [ -n "$BOB_DIR" ]; then
	echo "BOB_DIR is deprecated, BOB_PATH should be used instead" 1>&2
	BOB_PATH="${BOB_DIR}"
else
	BOB_PATH="${BOB_PATH=bob:.circleci:.github}"
fi

BOB_DIR=

if [ -z "$BOB_DIST" ]; then
	BOB_SUFFIX=default
	DOCKERFILE=Dockerfile
else
	if [ `echo "$BOB_DIST" | wc -w` != 1 ]; then
		echo "The BOB_DIST variable can contain at most one word"
		exit 1
	fi
	BOB_SUFFIX=$BOB_DIST
	DOCKERFILE=Dockerfile.$BOB_DIST
fi

if [ "$(uname)" == "Darwin" ]; then
	READLINK_BINARY=greadlink
	MKTEMP_BINARY=gmktemp
else
	READLINK_BINARY=readlink
	MKTEMP_BINARY=mktemp
fi

usage() {
	cat << EOF
bob - run commands in the current directory, inside a container.

Usage :
    bob CMD [ARG]              : run CMD in a transient container. CMD can't be one of the protected sub-command
    bob run CMD [ARG]          : same as above, but CMD can be anything
    bob [build]                : build or update container image
    bob name                   : print the container tag name - using BOB_DIST
    bob (help|--help|-h)       : print this message and exit

Environmentvariables
    BOB_DIST to select Dockerfile.${BOB_DIST} - Only one word
    BOB_DIR to change the directory name containing the Dockerfile

bob will look for a ./bob directory containing a Dockerfile to build the
container, starting in the current directory, then in its parent, all the way to
/ if necessary.
EOF

	exit 0
}

sanity_checks() {
	if [ -z "$HOME" ]; then
		echo "\$HOME isn't defined, exiting"
		exit 1
	fi

	if ! pwd | grep "^$HOME" &>/dev/null; then
		echo "Not returning from a home subdirectory, exiting"
		exit 1
	fi
}
	
find_root() {
	OPWD="$(pwd)"
	IFS_SAVE="$IFS"
	IFS=:
	while true; do
		for dir in $BOB_PATH; do
			if [ -f "$dir/Dockerfile" ]; then
				BOB_DIR="$dir"
				break 2
			fi
		done
		if [ `pwd` == "/" ]; then
			IFS="$IFS_SAVE"
			echo "Walked back, for many miles, and couldn't find a {$(echo $BOB_PATH | sed s/:/,/g)}/Dockerfile"
			exit 1
		fi
		cd ..
	done
	IFS="$IFS_SAVE"

	BASE="$(pwd)"
	NAME=$(echo $(whoami)-$(basename $($READLINK_BINARY -f .))-$BOB_SUFFIX | tr '[:upper:]' '[:lower:]')
}

build () {
	cd "$BOB_DIR"
	TDF="$($READLINK_BINARY -f $($MKTEMP_BINARY -p .))"
	trap "rm \"$TDF\"" exit
	cp $DOCKERFILE "$TDF"
	cat <<-'EOF' >> "$TDF"
	ARG USER
	ARG UID
	RUN if [ "$(. /etc/os-release &> /dev/null && echo ${ID})" = "alpine" ]; then adduser -D -u $UID $USER; else useradd -u $UID $USER; fi
	EOF
	$BOB_BINARY build --no-cache --pull --build-arg BASE=$BASE --build-arg USER=$(whoami) --build-arg UID=$(id -u) -t $NAME -f "$TDF" .
	cd ..
}

maybe_build() {
	if [ -z "$($BOB_BINARY images -q $NAME 2> /dev/null)" ]; then
		build
	fi
}

run () {
	maybe_build

	$BOB_BINARY run $RUNOPTS -it --init --network host -e HOME,USER -v "$HOME":"$HOME" --workdir "$OPWD" --rm $NAME $@
}

if [ "$1" = "help" -o "$1" = "--help" -o "$1" = "-h" ]; then
	usage
fi

sanity_checks
find_root

case "$1" in
	build|"")
		build
		;;
	name)
		echo $NAME
		exit 0
		;;
	run)
		shift
		run "$@"
		;;
	*)
		run "$@"
		;;
esac
